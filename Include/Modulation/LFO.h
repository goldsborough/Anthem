/*********************************************************************************************//*!
*
*  @file        LFO.h
*
*  @author      Peter Goldsborough
*
*  @date        14/10/2014
*
*  @brief       LFOs and LFOUnits.
*
*************************************************************************************************/

#ifndef __Anthem__LFO__
#define __Anthem__LFO__

#include "Units.h"
#include "EnvSeg.h"

class EnvSegSeq;
class Oscillator;
class XFadeUnit;

/*************************************************************************************************//*!
*
*  @brief       A Low Frequency Oscillator (LFO) class.
*
*  @details     The LFO class is essentially an interface to an Oscillator which additionally
*               implements a set of ModDocks for modulation of LFOs (by other modulation  units).
*
*****************************************************************************************************/

class LFO : public GenUnit
{
    
public:
    
    /*! Various ModDocks available for modulation */
    enum DOCKS
    {
        AMP,
        RATE,
        PHASE
    };
    
    /*************************************************************************************************//*!
    *
    *  @brief       Constructs an LFO object.
    *
    *  @param       wt The LFO's wavetable, typically a member of WavetableDB::Wavetables.
    *
    *  @param       rate The LFO's initial rate or frequency.
    *
    *  @param       phaseOffset An initial phase offset, in degrees (0-360).
    *
    *****************************************************************************************************/
    
    LFO(short wt = 0, double rate = 1, double phaseOffset = 0);
    
    ~LFO();
    
    /*************************************************************************************************//*!
    *
    *  @brief       Generates a sample.
    *
    *  @details     An LFO sample is generated by first checking for modulation by any ModDocks and
    *               then returning the internal oscillator's tick.
    *
    *****************************************************************************************************/
    
    double tick();
    
    /*************************************************************************************************//*!
    *
    *  @brief       Sets the LFO's wavetable
    *
    *  @param       wt The new wavetable id, typically a member of WavetableDB::Wavetables.
    *
    *****************************************************************************************************/
    
    void setWavetable(short wt);
    
    /*************************************************************************************************//*!
    *
    *  @brief       Sets the LFO's frequency.
    *
    *  @param       Hz The new frequency, in Hertz.
    *
    *****************************************************************************************************/
    
    void setRate(double Hz);
    
    /*************************************************************************************************//*!
    *
    *  @brief       Gives the LFO's phase an offset.
    *
    *  @param       degrees The degrees by which to offset the phase by.
    *
    *****************************************************************************************************/
    
    void setPhaseOffset(double degrees);
    
private:
    
    /*! Allocates new ModDocks */
    void _initModDocks();
    
    /*! The LFO's rate, or frequency */
    double _rate;
    
    /*! The LFO's phase offset, if any */
    double _phaseOffset;
    
    /*! The oscillator object that LFOs wrap around */
    Oscillator* _osc;
};

class LFOSeq : public GenUnit
{
    
public:
    
    LFOSeq(unsigned int seqLength = 20);
    
    double tick() { return seq.tick(); };
    
    void setRate(double Hz);
    
    EnvSegSeq seq;
    
private:
    
    const unsigned int _seqLen;
};

class LFOUnit : public GenUnit
{
    
public:
    
    enum Modes { LFO, SEQ };
    
    enum Units { A, B };
    
    enum EnvSegs { SegA, SegB }; // The two parts of the envelope pyramid: SegA: / SegB: \ Together: /\
    
    enum EnvAmpPoints { BEG, MID, END};
    
    typedef bool unit_t;
    typedef unsigned int subseg_t;
    
    LFOUnit();
    
    ~LFOUnit();
    
    double tick();
    
    void setMode(unit_t mode) { _mode = mode; }
    
    void setEnvSegLen(unit_t envSeg, unsigned short len);
    
    void setEnvLevel(unsigned char point, double lv);
    
    void setEnvLoopMax(unsigned char loopNum);
    
    void setLFOWave(unit_t unitNum, int wave) { _LFOs[unitNum].setWavetable(wave); }
    
    void setLFOPhaseOffset(unit_t unitNum, short degrees) { _LFOs[unitNum].setPhaseOffset(degrees); };
    
    void setLFOSeqSegWave(unit_t unitNum, subseg_t segNum, int wave);
    
    void setLFOSeqSegAmp(unit_t unitNum, subseg_t seg, double amp);
    
    void setLFOSeqLoopStart(unit_t unitNum, subseg_t segNum);
    
    void setLFOSeqLoopEnd(unit_t unitNum, subseg_t segNum);
    
    void setXFade(char value);
    
    void setRate(unit_t unitNum, double Hz);
    
private:
    
    
    struct LFOSeq _LFOSeqs[2];
    
    struct LFO _LFOs[2];
    
    unit_t _mode;
    
    EnvSegSeq * _env;
    
    XFadeUnit * _xfade;
};

#endif /* defined(__Anthem__LFO__) */
