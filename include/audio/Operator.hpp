/*********************************************************************************************//*!
*
*  @file        Operator.hpp
*
*  @author      Peter Goldsborough
*
*  @date        10/11/2014
*
*  @brief       Defines the Operator class.
*
*************************************************************************************************/

#ifndef __Anthem__Operator__
#define __Anthem__Operator__

#include "Oscillator.hpp"
#include "Units.hpp"

/*************************************************************************************************//*!
*
*  @brief       The Operator class.
*
*  @details     Operators are advanced Oscillators used for FM synthesis. They are the interface
*               users ultimately interact with when producing and synthesizing music.
*
*****************************************************************************************************/

class Operator : public Oscillator, public GenUnit
{
    
public:
    
    typedef unsigned short note_t;
    
    /*! Available ModDocks for modulation */
    enum Docks { LEVEL };
    
    /*! Synthesis mode for setting the level */
    enum Mode { FM, ADDITIVE };
    
    /*************************************************************************************************//*!
    *
    *  @brief       Constructs an Operator object.
    *
    *  @param       wt The initial wavetable id, defaults to 0, or WavetableDatabase::SINE.
    *
    *  @param       frqOffset An initial frequency offset.
    *
    *  @param       level The modulation amount.
    *
    *  @param       phaseOffset A phase offset, in degrees.
    *
    *  @param       ratio The frequency ratio relative to any current note being played.
    *
    *****************************************************************************************************/
    
    Operator(unsigned short wt = 0, double freqOffset = 0,
             double level = 0, bool mode = 0,
             short phaseOffset = 0, double ratio = 1);
    
    /*************************************************************************************************//*!
    *
    *  @brief       Ticks a sample.
    *
    *  @return      A sample generated by the Operator.
    *
    *****************************************************************************************************/
    
    double tick();
    
    /*************************************************************************************************//*!
    *
    *  @brief       Increment's the Operator's wavetable index.
    *
    *  @see         Oscillator::update()
    *
    *****************************************************************************************************/
    
    void update();
    
    /*************************************************************************************************//*!
    *
    *  @brief       Modulates the Operator's frequency.
    *
    *  @details     The value passed is added to the Operator's current frequency.
    *
    *  @param       value The frequency value to add to the Operator's frequency.
    *
    *****************************************************************************************************/
    
    void modulateFrequency(double value);
    
    /*! @copydoc Oscillator::getFrequency() */
    double getFrequency() const;
    
    /*************************************************************************************************//*!
    *
    *  @brief       Sets the Operator's note.
    *
    *  @param       note The note, between 0 and 127, A4 being at 48.
    *
    *****************************************************************************************************/
    
    void setNote(note_t note);
    
    /*************************************************************************************************//*!
    *
    *  @brief       Returns the Operator's current note.
    *
    *  @return      The note, between 0 and 120, A4 being at 48.
    *
    *  @see         Util::noteToFreq()
    *
    *****************************************************************************************************/
    
    note_t getNote() const;
    
    /*************************************************************************************************//*!
    *
    *  @brief       Sets the Operator's frequency offset in Hertz.
    *
    *  @param       Hz The new frequency offset, in Hertz.
    *
    *****************************************************************************************************/
    
    void setFrequencyOffset(double Hz);
    
    /*************************************************************************************************//*!
    *
    *  @brief       Returns the Operator's frequency offset.
    *
    *  @return      The current frequency offset, in Hertz.
    *
    *****************************************************************************************************/
    
    double getFrequencyOffset() const;
    
    /*************************************************************************************************//*!
    *
    *  @brief       Sets the Operator's frequency offset in semitones.
    *
    *  @param       semitones The new frequency offset, in semitones.
    *
    *****************************************************************************************************/
    
    void setSemitoneOffset(double semitones);
    
    /*************************************************************************************************//*!
    *
    *  @brief       Returns the Operator's frequency offset in semitones.
    *
    *  @return      The new frequency offset, in semitones.
    *
    *****************************************************************************************************/
    
    double getSemitoneOffset() const;
    
    /*************************************************************************************************//*!
    *
    *  @brief       Sets the Operator's frequency ratio.
    *
    *  @details     All Operators have the same note/base frequency and differ in the ratio.
    *
    *  @param       ratio The new frequency ratio.
    *
    *****************************************************************************************************/
    
    void setRatio(double ratio);
    
    /*************************************************************************************************//*!
    *
    *  @brief       Returns the Operator's frequency ratio.
    *
    *  @return      The Operator's frequency ratio.
    *
    *****************************************************************************************************/
    
    double getRatio() const;
    
    void setMode(bool mode);
    
    bool getMode() const;
    
    void setLevel(double level);
    
    /*************************************************************************************************//*!
    *
    *  @brief       Returns the Operator's current modulation level.
    *
    *  @return      The Operator's current modulation level/amount.
    *
    *****************************************************************************************************/
    
    double getLevel() const;
    
private:
    
    /*! Current mode - FM or ADDITIVE */
    bool mode_;
    
    /*! The current fm modulation level */
    double level_;
    
    /*! The frequency ratio of the Operator
        relative to the current note */
    double ratio_;
    
    /*! Index increment offset from frequency modulaton */
    double modOffset_;
    
    /*! Current frequency offset value in table index increment */
    double indexOffset_;
    
    /*! Current frequency offset value in Hertz */
    double freqOffset_;
    
    /*! Current frequency offset value in semitones */
    double semitoneOffset_;
    
    /*! The real current frequency, freq_ (which is noteFreq_ * ratio_) + freqOffset_*/
    double realFreq_;
    
    /*! The frequency of the original note, without any ratio */
    double noteFreq_;
    
    /*! The note that was originally input, without any ratio */
    note_t note_;
};

#endif /* defined(__Anthem__Operator__) */
